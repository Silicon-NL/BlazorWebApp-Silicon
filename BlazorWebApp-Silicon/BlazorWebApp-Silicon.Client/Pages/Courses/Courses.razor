@using System.Text.Json
@rendermode InteractiveServer

@attribute [StreamRendering]

<section class="courses-showcase">
    <div class="container">
        <div class="courses-showcase-top">
            <div class="top-text">

                <ul class="breadcrumb">
                    <li><i class="fa-solid fa-house"></i><a href="/">Home</a></li>
                    <li class="active"><i class="fa-solid fa-angles-right"></i>Courses</li>
                </ul>
                <h1>Courses</h1>
            </div>

            <form class="filters">
                <div class="courses-showcase-search">
                    <div class="select">
                        <div class="selected" @onclick="ToggleOptions">@selectedCategory</div>
                        <i class="fa-solid fa-caret-down" @onclick="ToggleOptions"></i>
                        <div class="select-options" style="display: @optionsDisplayStyle">
                            @if (courses != null)
                            {
                                <div class="option" @onclick='() => FilterCourses("all")'>All categories</div>
                                @foreach (var category in courses.SelectMany(c => c.Categories).Distinct())
                                {
                                    <div class="option" @onclick="() => FilterCourses(category)">@category</div>
                                }
                            }
                        </div>
                    </div>

                    <div class="input-search-group">
                        <input id="searchQuery" name="searchQuery" placeholder="Search courses" @oninput="UpdateSearchQuery" />
                        <i class="fa-solid fa-magnifying-glass" @onclick="SearchCourses"></i>
                    </div>
                </div>
            </form>

        </div>

        @if (courses != null && courses.Any(c => c.IsVisible))
        {
            <div class="courses-showcase-content">

                @foreach (var course in courses.Where(c => c.IsVisible))
                {

                    <a class="course" href="@($"/CourseDetails/{course.Id}")">
                        <div class="courses-box">

                            <div class="courses-box-top">
                                @if (course.IsBestSeller)
                                {
                                    <p>Best seller</p>
                                }
                            </div>

                            <form class="savedItemsForm" method="post" ="/SavedItems">
                                <input type="hidden" name="courseId" value="@course.Id" />
                                <button type="submit"><i class="fa-regular fa-bookmark"></i></button>
                            </form>

                            <img src="@course.ImageUri" alt="@course.Title">

                            <div class="courses-text">
                                <h5>@course.Title</h5>
                                <p>@course.Author</p>
                            </div>

                            @if (course.DiscountPrice != null)
                            {
                                <div class="prices">
                                    <p><s>@course.Price $</s></p>
                                    <p>@course.DiscountPrice $</p>
                                </div>
                            }
                            else
                            {
                                <div class="prices">
                                    <p>@course.Price $</p>
                                </div>
                            }

                            <div class="hour-rating">
                                <p><i class="fa-regular fa-clock"></i>@course.Hours</p>
                                <p><i class="fa-regular fa-thumbs-up"></i>@course.LikesInProcent% (@course.Likes k)</p>
                            </div>
                        </div>
                    </a>
                }
            </div>
        }
        else
        {
            <p>No Courses Found</p>
        }
    </div>

</section>

@code {
    private List<CourseCardModel>? courses;
    private string optionsDisplayStyle = "none";
    private string selectedCategory = "All categories";
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery
            {
                Query = "{ getCourses { id title isBestSeller imageUri isDigital categories ingress starRating reviews likesInProcent likes hours authors { name } prices { currency price discount } content { description includes } } }"
            };

        var response = await Http.PostAsJsonAsync("https://courseprovider-silicon-nl.azurewebsites.net/api/graphql?code=BjXYslY76lPRzAeYp0FsiAxcYtip4Z7sX2yeweYb9nBGAzFufiglzw%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine(jsonResponse);

            var result = JsonSerializer.Deserialize<DynamicGraphQLResponse>(jsonResponse);

            if (result != null && result.Data.TryGetProperty("getCourses", out JsonElement coursesElement) && coursesElement.ValueKind != JsonValueKind.Undefined)
            {
                courses = new List<CourseCardModel>();

                foreach (var course in coursesElement.EnumerateArray())
                {
                    try
                    {
                        var courseModel = new CourseCardModel
                            {
                                Id = course.GetProperty("id").GetString(),
                                Title = course.GetProperty("title").GetString(),
                                IsBestSeller = course.GetProperty("isBestSeller").GetBoolean(),
                                IsDigital = course.GetProperty("isDigital").GetBoolean(),
                                ImageUri = course.GetProperty("imageUri").GetString(),
                                Categories = JsonSerializer.Deserialize<string[]>(course.GetProperty("categories").GetRawText()),
                                Ingress = course.GetProperty("ingress").GetString(),
                                StarRating = course.GetProperty("starRating").GetDecimal(),
                                Reviews = course.GetProperty("reviews").GetString(),
                                LikesInProcent = course.GetProperty("likesInProcent").GetString(),
                                Likes = course.GetProperty("likes").GetString(),
                                Hours = course.GetProperty("hours").GetString(),
                                Author = course.GetProperty("authors")[0].GetProperty("name").GetString(),
                                Price = $"{course.GetProperty("prices").GetProperty("currency").GetString()} {course.GetProperty("prices").GetProperty("price").GetDouble()}",
                                DiscountPrice = course.GetProperty("prices").GetProperty("discount").GetDouble() > 0
                                        ? $"{course.GetProperty("prices").GetProperty("currency").GetString()} {course.GetProperty("prices").GetProperty("price").GetDouble() - course.GetProperty("prices").GetProperty("discount").GetDouble()}"
                                        : null,
                                IsVisible = true
                            };

                        courses.Add(courseModel);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error processing course: {ex.Message}");
                    }
                }
            }
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

    private void ToggleOptions()
    {
        optionsDisplayStyle = optionsDisplayStyle == "none" ? "block" : "none";
    }

    private void FilterCourses(string category)
    {
        selectedCategory = category;
        optionsDisplayStyle = "none";

        if (category == "all")
        {
            selectedCategory = "All categories";
        }

        ApplyFilters();
    }

    private void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void SearchCourses()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (courses != null)
        {
            foreach (var course in courses)
            {
                bool matchesCategory = selectedCategory == "All categories" || course.Categories != null && course.Categories.Contains(selectedCategory, StringComparer.OrdinalIgnoreCase);
                bool matchesSearch = string.IsNullOrEmpty(searchQuery) || course.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase);

                bool matchesCategoryInTitle = selectedCategory == "All categories" || course.Title.Contains(selectedCategory, StringComparison.OrdinalIgnoreCase);

                course.IsVisible = matchesCategory && matchesSearch && matchesCategoryInTitle;
            }
        }
    }


}
