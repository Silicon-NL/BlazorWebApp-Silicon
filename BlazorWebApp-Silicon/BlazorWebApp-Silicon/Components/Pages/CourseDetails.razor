@page "/CourseDetails/{CourseId}"
@using System.Text.Json

<PageTitle>Course details</PageTitle>


@if (course != null)
{
    <section class="courseDescription-showcase">
        <div class="container">
            <div class="courseDescription-showcase-content">
                <div class="courseDescription-showcase-top">
                    <div class="top-text">
                        <ul class="breadcrumb">
                            <li><i class="fa-solid fa-house"></i><a href="/">Home</a></li>
                            <li class="active"><i class="fa-solid fa-angles-right"></i>Courses</li>
                        </ul>
                    </div>
                </div>

                <div class="courseDescription-showcase-top-text">
                    @if (course.IsBestSeller)
                    {
                        <p class="best-seller">Best Seller</p>
                    }
                    @if (course.IsDigital)
                    {
                        <p class="digital">Digital</p>
                    }
                </div>

                <h1>@course.Title</h1>
                <p>@course.Ingress</p>
                <div class="courseDescription-showcase-rating">
                    <div class="rating">
                        <p><i class="fa-solid fa-star" style="color: #FFD43B;"></i>(@course.StarRating)</p>
                        <p><i class="fa-solid fa-thumbs-up"></i>@course.Likes K likes</p>
                        <p><i class="fa-regular fa-clock"></i>@course.Hours hours</p>
                    </div>

                    <div class="creator-info">
                        <img src="/images/courseDescription-Creator-image.svg" alt="">
                        <div class="creator-text">
                            <p>Created by</p>
                            <p>@course.Author</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="courseDescription-image">
            <img src="@course.ImageHeaderUri" alt="">
        </div>
    </section>

    <section class="courseDescription-contentSection">
        <div class="container">
            <div class="content-top">
                <div class="content-top-text">
                    @(new MarkupString(course.Content))
                </div>

                <div class="content-top-right">
                    <h6>This course includes:</h6>
                    <ul>
                        @foreach (var item in course.Includes)
                        {
                            <li>@item</li>
                        }
                    </ul>

                    @if (course.DiscountPrice != null)
                    {
                        <div class="price">
                            <p>@course.DiscountPrice</p>
                            <p><s>@course.Price</s></p>
                        </div>
                    }
                    else
                    {
                        <div class="price">
                            <p>@course.Price</p>
                        </div>
                    }
                    <EditForm FormName="savedItemForm" Model="course" OnValidSubmit="SavedItems">
                        <button class="btn btn-theme">Save Course</button>
                    </EditForm>
                    

                </div>
            </div>

            <div class="content-mid">
                <h1>Program Details</h1>
                @foreach (var detail in course.ProgramDetails)
                {
                    <div id="content-mid-box">
                        <img src="https://blazorappsiliconstorage.blob.core.windows.net/blazorapp-images/1.svg" alt="">
                        <div id="content-mid-box-text">
                            <h4>@detail.Title</h4>
                            <p>@detail.Description</p>
                        </div>
                    </div>
                }
            </div>

            <div class="content-bottom">
                <img src="https://blazorappsiliconstorage.blob.core.windows.net/blazorapp-images/coursedescription-creator-img.svg" alt="">
                <div class="content-bottom-text">
                    <p>Learn from the best</p>
                    <h1>@course.Author</h1>
                    <p>Dolor ipsum amet cursus quisque porta adipiscing. Lorem convallis malesuada sed maecenas. Ac dui at vitae mauris cursus in nullam porta sem. Quis pellentesque elementum ac bibendum. Nunc aliquam in tortor facilisis. Vulputate eget risus, metus phasellus. Pellentesque faucibus amet, eleifend diam quam condimentum convallis ultricies placerat. Duis habitasse placerat amet, odio pellentesque rhoncus, feugiat at. Eget pellentesque tristique felis magna fringilla.</p>
                    <button id="yt" class="btn-theme"><i class="fa-brands fa-youtube"></i>240k subscribers</button>
                    <button id="fb" class="btn-theme"><i class="fa-brands fa-facebook"></i>240k subscribers</button>
                </div>
            </div>
        </div>
    </section>
}
else
{
    <p>Loading...</p>
}


@code {

    [Parameter]
    public string CourseId { get; set; }

    private CourseCardModel course;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery { Query = $@"query {{ getCourseById(id: ""{CourseId}"") {{ id title isBestSeller imageUri isDigital categories ingress starRating reviews likesInProcent likes hours authors {{ name }} prices {{ currency price discount }} content {{ description includes programDetails {{ id title description }} }} }} }}" };


        var response = await Http.PostAsJsonAsync("https://courseprovider-silicon-nl.azurewebsites.net/api/graphql?code=BjXYslY76lPRzAeYp0FsiAxcYtip4Z7sX2yeweYb9nBGAzFufiglzw%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine(jsonResponse);

            var result = JsonSerializer.Deserialize<DynamicGraphQLResponse>(jsonResponse);
            Console.WriteLine(result);

            if (result != null && result.Data.TryGetProperty("getCourseById", out JsonElement courseElement) && courseElement.ValueKind != JsonValueKind.Undefined)
            {
                try
                {
                    Console.WriteLine(courseElement);
                    course = new CourseCardModel
                        {
                            Id = courseElement.GetProperty("id").GetString(),
                            Title = courseElement.GetProperty("title").GetString(),
                            IsBestSeller = courseElement.GetProperty("isBestSeller").GetBoolean(),
                            IsDigital = courseElement.GetProperty("isDigital").GetBoolean(),
                            ImageUri = courseElement.GetProperty("imageUri").GetString(),
                            ImageHeaderUri = courseElement.GetProperty("imageUri").GetString(),
                            Categories = JsonSerializer.Deserialize<string[]>(courseElement.GetProperty("categories").GetRawText()),
                            Ingress = courseElement.GetProperty("ingress").GetString(),
                            StarRating = courseElement.GetProperty("starRating").GetDecimal(),
                            Reviews = courseElement.GetProperty("reviews").GetString(),
                            LikesInProcent = courseElement.GetProperty("likesInProcent").GetString(),
                            Likes = courseElement.GetProperty("likes").GetString(),
                            Hours = courseElement.GetProperty("hours").GetString(),
                            Author = courseElement.GetProperty("authors")[0].GetProperty("name").GetString(),
                            Price = $"{courseElement.GetProperty("prices").GetProperty("currency").GetString()} {courseElement.GetProperty("prices").GetProperty("price").GetDouble()}",
                            DiscountPrice = courseElement.GetProperty("prices").GetProperty("discount").GetDouble() > 0
                                        ? $"{courseElement.GetProperty("prices").GetProperty("currency").GetString()} {courseElement.GetProperty("prices").GetProperty("price").GetDouble() - courseElement.GetProperty("prices").GetProperty("discount").GetDouble()}"
                                        : null,
                            IsVisible = true,
                            Includes = JsonSerializer.Deserialize<string[]>(courseElement.GetProperty("content").GetProperty("includes").GetRawText()),

                            Content = courseElement.GetProperty("content").GetProperty("description").GetString(),
                            ProgramDetails = courseElement.GetProperty("content").GetProperty("programDetails")
                                     .EnumerateArray()
                                     .Select(detail => new ProgramDetail
                                     {
                                         Id = detail.GetProperty("id").GetInt32(),
                                         Title = detail.GetProperty("title").GetString(),
                                         Description = detail.GetProperty("description").GetString()
                                     }).ToArray()

                        };
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing course: {ex.Message}");
                }
            }
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

    public void SavedItems()
    {
        try
        {
            NavigationManager.NavigateTo($"/SavedItems{course.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ett undantag inträffade: {ex.Message}");
        }
    }
}
