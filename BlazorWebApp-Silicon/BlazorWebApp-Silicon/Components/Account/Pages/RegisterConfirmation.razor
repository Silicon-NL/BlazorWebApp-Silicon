@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>


<div class="container">

    <h1>Register confirmation</h1>

        <div class="signUp-text">
            <h1>Verify you Account</h1>
            <p>Didn't receive an email?<button class="btn-gray" @onclick="ResendCode">Resend email.</button></p>
        </div>

    <EditForm FormName="VerifyCodeForm" Model="VerifyCodeForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" method="post" novalidate>
            <DataAnnotationsValidator />

            <div class="form-content">
                <div class="varificationCode">
                    <label>Enter you verification code</label>
                    <InputText @bind-Value="VerifyCodeForm.Code" />
                    <ValidationMessage For="() => VerifyCodeForm.Code" />
                     <p>@statusMessage</p>
                </div>
            </div>

            <button class="btn-theme" type="submit">Send</button>
        </EditForm>        
</div>

@code {
    public string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string? Email { get; set; }

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public VerifyCodeModel VerifyCodeForm { get; set; } = new VerifyCodeModel();

   public async Task OnValidSubmit()
{
    try
    {
        var requestBody = new { Email = Email, Code = VerifyCodeForm.Code };
        Logger.LogInformation("Sending request to validation service with data: {RequestData}", requestBody);

        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-nl.azurewebsites.net/api/verify?code=D8ZK0q3vDWpcCi_vMVi7v1kT4KA9EcKx3tUg_vrZDclEAzFuoWDFlg%3D%3D", requestBody);
        
        var responseBody = await result.Content.ReadAsStringAsync();
        Logger.LogInformation("Received response from validation service: {ResponseData}", responseBody);

        if(result.IsSuccessStatusCode)
        {
                var user = await UserManager.FindByEmailAsync(Email!);
                if (user != null)
                {

                    user.EmailConfirmed = true;
                    await UserManager.UpdateAsync(user);

                    RedirectManager.RedirectTo("account/login");
                }
        }
        else 
        { 
            statusMessage = "Invalid code"; 
        }
    }
    catch(Exception ex)
    {
        Logger.LogError(ex, "An error occurred while sending request to validation service.");
        statusMessage = "An error occurred while processing your request.";
    }
}

    public async Task ResendCode()
    {
        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-nl.azurewebsites.net/api/GenerateVerificationCodeHttp?code=nwT0Yw2arWW5HPTpW-sxBbLOpOU4wEK482r5EO2LYyvuAzFupkGuGg%3D%3D", new { Email = Email});
        if (result.IsSuccessStatusCode)
        {
            statusMessage = "Code resent";
        }
        else { statusMessage = "Invalid code"; }
    }
    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
    }

    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; } = null!;
    }
}
