@page "/Account/Register"

<PageTitle>Sign Up</PageTitle>

<section id="signUp-section">
    <div class="container">
        <div class="signUp-text">
            <h1>Create Account</h1>
            <p>Already have an account?<NavLink href="/account/login">Sign in here.</NavLink></p>
        </div>

        <EditForm FormName="signUpForm" Model="SignUpForm" OnInvalidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" method="post" novalidation>
            <DataAnnotationsValidator />

            <div class="fullname">
                <div class="firstName">
                    <label>First Name</label>
                    <ValidationMessage For="() => SignUpForm.FirstName" />
                    <InputText @bind-Value="SignUpForm.FirstName" />
                </div>

                <div class="lastName">
                    <label>Last Name</label>
                    <ValidationMessage For="() => SignUpForm.LastName" />
                    <InputText @bind-Value="SignUpForm.LastName" />
                </div>
            </div>

            <label>Email Address</label>
            <ValidationMessage For="() => SignUpForm.EmailAddress" />
            <InputText @bind-Value="SignUpForm.EmailAddress" />

            <label>Password</label>
            <ValidationMessage For="() => SignUpForm.Password" />
            <InputText @bind-Value="SignUpForm.FirstName" />

            <label>Confirm Password</label>
            <ValidationMessage For="() => SignUpForm.ConfirmPassword" />
            <InputText @bind-Value="SignUpForm.FirstName" />

            <div class="signUp-checkbox">
                <InputCheckbox @bind-Value="SignUpForm.TermsAndConditions"/>
                <label>I agree to the <NavLink href="/terms">Terms</NavLink> & <NavLink href="/conditions">Conditions</NavLink></label>
                <span><ValidationMessage For="() => SignUpForm.TermsAndConditions" /></span>
            </div>

            <button class="btn-theme" type="submit">Sign Up</button>

        </EditForm>
    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    public string ConfirmMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    public string ErrorMessage { get; set; } = "";

    [SupplyParameterFromForm]
    public SignUpModel SignUpForm { get; set; } = new SignUpModel();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task OnValidSubmit(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                UserName = SignUpForm.EmailAddress,
                Email = SignUpForm.EmailAddress,

                UserProfile = new ApplicationUserProfile
                {
                    FirstName = SignUpForm.FirstName,
                    LastName = SignUpForm.LastName
                }
            };

        var result = await UserManager.CreateAsync(user, SignUpForm.Password);
        if (!result.Succeeded)
        {
            ErrorMessage = "Unable to register. Try agen later.";
            return;
        };

        await Http.PostAsJsonAsync("", SignUpForm);
        if(UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("account/RegisterConfirmation", new() { ["email"] = SignUpForm.EmailAddress, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    public class SignUpModel
    {
        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [DataType(DataType.Text)]
        [Required(ErrorMessage = "Invalid first name")]
        [MinLength(2, ErrorMessage = "Invalid first name")]
        public string FirstName { get; set; } = null!;


        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [DataType(DataType.Text)]
        [Required(ErrorMessage = "Invalid last name")]
        [MinLength(2, ErrorMessage = "Invalid last name")]
        public string LastName { get; set; } = null!;


        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
        [DataType(DataType.EmailAddress)]
        [RegularExpression("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        public string EmailAddress { get; set; } = null!;


        [Display(Name = "Password", Prompt = "Enter your password", Order = 3)]
        [DataType(DataType.Password)]
        [RegularExpression("^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$", ErrorMessage = "Invalid password")]
        public string Password { get; set; } = null!;


        [Display(Name = "Confirm password", Prompt = "Confirm you password", Order = 4)]
        [DataType(DataType.Password)]
        [Compare(nameof(Password), ErrorMessage = "Invalid password confirmation")]
        public string ConfirmPassword { get; set; } = null!;


        [Display(Name = "I agree to the Terms & Conditions", Order = 5)]
        [Required(ErrorMessage = "You must accept the terms and conditions")]
        public bool TermsAndConditions { get; set; } = false!;
    }

}
