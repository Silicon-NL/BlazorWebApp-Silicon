@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp_Silicon.Data
@using Microsoft.EntityFrameworkCore


<div class="basicInfo">
    <h1>Account details</h1>
    <h5>Account info</h5>

    <EditForm FormName="basicInfoModel" Model="applicationUserProfile" OnValidSubmit="@OnValidSubmitAsync" method="post" novalidate>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div id="firstName" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="basicInfoModel.FirstName" disabled />
            }
            else
            {
                <label>First Name</label>
                <InputText @bind-Value="basicInfoModel.FirstName" />
                <ValidationMessage For="() => basicInfoModel.FirstName" />
            }
        </div>
        <div id="lastName" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="basicInfoModel.LastName" disabled />
            }
            else
            {
                <label>Last Name</label>
                <InputText @bind-Value="basicInfoModel.LastName" />
                <ValidationMessage For="() => basicInfoModel.LastName" />
            }
        </div>
        <div id="emailAddress" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="basicInfoModel.Email" disabled />
            }
            else
            {
                <label>Email address</label>
                <InputText @bind-Value="basicInfoModel.Email" />
                <ValidationMessage For="() => basicInfoModel.Email" />
            }
        </div>
        <div id="phoneNumber" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="basicInfoModel.Phone" disabled />
            }
            else
            {
                <label>Phone (optional)</label>
                <InputText @bind-Value="basicInfoModel.Phone" />
            }
        </div>
        <div id="bioInfo" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="basicInfoModel.Biography" disabled />
            }
            else
            {
                <label>Biography</label>
                <InputText @bind-Value="basicInfoModel.Biography" />
            }
        </div>
        <div class="form-btn">
            <button class="btn-gray" type="reset">Cancel</button>
            <button class="btn-theme" type="submit">Save changes</button>
        </div>
    </EditForm>
</div>


@code {
    private bool isExternalAccount;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public BasicInfoFormModel basicInfoModel { get; set; } = new BasicInfoFormModel();
    public ApplicationUserProfile applicationUserProfile { get; set; } = new ApplicationUserProfile();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            var logins = await UserManager.GetLoginsAsync(user);
            isExternalAccount = logins.Any();

            var userProfile = await DbContext.AspNetUserProfiles.FirstOrDefaultAsync(x => x.Id == user.ApplicationUserProfileId);

            if (basicInfoModel != null)
            {
                if (basicInfoModel.FirstName == null) { basicInfoModel.FirstName = userProfile.FirstName; }

                if (basicInfoModel.LastName == null) { basicInfoModel.LastName = userProfile.LastName; }
                if (basicInfoModel.Email == null) { basicInfoModel.Email = user.Email; }
                if (basicInfoModel.Phone == null) { basicInfoModel.Phone = userProfile.PhoneNumber; }
                if (basicInfoModel.Biography == null) { basicInfoModel.Biography = userProfile.Biography; }
            }
            

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    public async Task OnValidSubmitAsync()
    {
        try
        {

            var user = await UserAccessor.GetRequiredUserAsync(HttpContext);

            if (user != null)
            {
                var userProfile = await DbContext.AspNetUserProfiles.FirstOrDefaultAsync(x => x.Id == user.ApplicationUserProfileId);

                userProfile.FirstName = basicInfoModel.FirstName;
                userProfile.LastName = basicInfoModel.LastName;
                user.Email = basicInfoModel.Email;
                userProfile.PhoneNumber = basicInfoModel.Phone;
                userProfile.Biography = basicInfoModel.Biography;

                await DbContext.SaveChangesAsync();

                await SignInManager.RefreshSignInAsync(user);
                RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
            }
            

        }
        catch (DbUpdateConcurrencyException ex)
        {
            Console.WriteLine("Concurrency error: " + ex.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            throw;
        }
    }
    public class BasicInfoFormModel
    {
        [Required]
        [Display(Name = "First name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name")]
        public string LastName { get; set; } = null!;

        [Required]
        [Display(Name = "Email address")]
        [DataType(DataType.EmailAddress)]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = null!;

        [Display(Name = "Phone (optional)")]
        [DataType(DataType.PhoneNumber)]
        public string? Phone { get; set; }

        [Display(Name = "Biography")]
        [DataType(DataType.MultilineText)]
        public string? Biography { get; set; }
    }
}
