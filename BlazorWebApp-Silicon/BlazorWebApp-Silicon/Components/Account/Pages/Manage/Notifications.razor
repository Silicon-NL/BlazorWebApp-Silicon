@page "/Account/Manage/Notifications"
@using Newtonsoft.Json

<section class="notificationSection">
    <h3>Notifications</h3>
    <EditForm FormName="accountNotificationsForm" Model="accountNotifications" OnValidSubmit="OnValidSubmitAsync" method="post" novalidate>
        <div class="email-notification">
            <label>Preferred email for notifications</label>
            <InputText class="email-notification-input" @bind-Value="accountNotifications.NotificationEmail" placeholder="example@gmail.com" />
        </div>

        <div class="btn-switch subscribeNewsletter">
            <label class="switch" for="switch-mode">
                <InputCheckbox type="checkbox" id="switch-mode" @bind-Value="@accountNotifications.NewsletterSubscribe" />
                <div class="slider round"></div>
            </label>
            <div class="subscribeNewsletterText">
                <label>Subscribe to Newsletter</label>
                <p>Nec, posuere non felis duis massa vitae aliquet interdum scelerisque. Neque ullamcorper.</p>
            </div>
        </div>

        <div class="btn-switch DarkMode">
            <label class="switch" for="switch-mode">
                <InputCheckbox type="checkbox" id="switch-mode" @bind-Value="@accountNotifications.DarkMode" />
                <div class="slider round"></div>
            </label>
            <div class="DarkModeText">
                <label>Use Dark Mode Theme in Application</label>
                <p>Tortor massa porttitor enim tristique neque fermentum sed.</p>
            </div>
        </div>

        <div class="form-btn">
            <button class="btn-gray" type="reset">Cancel</button>
            <button class="btn-theme" type="submit">Save changes</button>
        </div>
    </EditForm>
</section>

@code {
    [SupplyParameterFromForm(FormName = "accountNotificationsForm")]
    private AccountNotifications accountNotifications { get; set; } = new AccountNotifications();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var email = !string.IsNullOrEmpty(accountNotifications.NotificationEmail) ? accountNotifications.NotificationEmail : user.Email;

        var result = await Http.PostAsJsonAsync("https://newsletterprovider-silicon-nl.azurewebsites.net/api/Subscribe?code=OFbaYcV1zykt05NiLzTls1lv6Tkx3oiFvkB8velll2WkAzFu0jYaew%3D%3D", new { email });
        if (result.IsSuccessStatusCode)
        {
            accountNotifications.NewsletterSubscribe = true;
        }
        else
        {
            accountNotifications.NewsletterSubscribe = false;
        }
    }

    private async Task OnValidSubmitAsync()
    {

        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var email = !string.IsNullOrEmpty(accountNotifications.NotificationEmail) ? accountNotifications.NotificationEmail : user.Email;

        if (accountNotifications.NewsletterSubscribe)
        {

            var result = await Http.PostAsJsonAsync("https://newsletterprovider-silicon-nl.azurewebsites.net/api/Subscribe?code=OFbaYcV1zykt05NiLzTls1lv6Tkx3oiFvkB8velll2WkAzFu0jYaew%3D%3D", new { email } );
            if (result.IsSuccessStatusCode)
            {
                accountNotifications.NewsletterSubscribe = true;
            }
        }
        else
        {
            var result = await Http.PostAsJsonAsync("https://newsletterprovider-silicon-nl.azurewebsites.net/api/UnSubscribe?code=z2cL0z88qeysobVV6I9YRF6x_a7uF-6CEiGllF9fM4_MAzFuExayDA%3D%3D", new { email });
            if (result.IsSuccessStatusCode)
            {
                accountNotifications.NewsletterSubscribe = false;
            }
        }
    }

    private class AccountNotifications
    {
        public string? NotificationEmail { get; set; }
        public bool NewsletterSubscribe { get; set; }
        public bool DarkMode { get; set; }
    }
}
