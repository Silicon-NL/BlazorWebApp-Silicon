@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp_Silicon.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Message="@message" />
<section class="accountSecurity">
        <div class="securityMain">
            <div class="passwordInfo">
                <h1>Security</h1>
                <h5>Password</h5>


                <EditForm id="passwordForm" Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div id="currentPassword" class="accountFormBox">
                        <label for="old-password">Old password</label>
                        <InputText type="password" @bind-Value="Input.OldPassword" typeof="password" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />                
                        <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
                    </div>

                    <div id="newPassword" class="accountFormBox">
                        <label for="new-password">New password</label>
                        <InputText type="password" @bind-Value="Input.NewPassword" typeof="password" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                        <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
                    </div>

                    <div id="confirmNewPassword" class="accountFormBox">
                        <label for="confirm-password">Confirm password</label>
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" typeof="password" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>

                    <div class="form-btn">
                        <button class="btn-gray" type="reset">Cancel</button>
                        <button class="btn-theme" type="submit">Change password</button>
                    </div>

                </EditForm>

                <hr />

                <div class="deleteAccount">
                    <h5>Delete account</h5>
                    <p class="delText">
                        When you delete your account, your public profile will be deactivated immediately. If you change your mind before
                        the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.
                    </p>

                    <EditForm Model="accountSecurityDelete" FormName="accountSecurityDelete" OnInvalidSubmit="OnValidSubmitAsync" id="deleteForm" method="post" novalidate>
                        <div class="del-checkbox">
                            <InputCheckbox @bind-Value="@accountSecurityDelete.DeleteAccount" />
                            <label>Yes, I want to delete my account.</label>
                        </div>
                        <button class="btn-theme" type="submit">Delete</button>
                    </EditForm>

                </div>
            </div>
    </div>
</section>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromForm]
    private AccountSecurityDelete accountSecurityDelete { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

    public class AccountSecurityDelete
    {
        [Display(Name = "Yes. I want to delete my account.")]
        public bool DeleteAccount { get; set; } = false;
    }
}
