@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp_Silicon.Data
@using Microsoft.EntityFrameworkCore


<div class="addressInfo">
    <h5>Address</h5>
    <EditForm FormName="addressInfoModel" Model="@addressInfoModel" OnValidSubmit="@OnValidSubmitAsync" method="post" novalidate>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div id="addressline1" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="addressInfoModel.AddressLine_1" disabled />
            }
            else
            {
                <label>AddressLine 1</label>
                <InputText @bind-Value="addressInfoModel.AddressLine_1" />
                <ValidationMessage For="() => addressInfoModel.AddressLine_1" />
            }
        </div>
        <div id="addressline2" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="addressInfoModel.AddressLine_2" disabled />
            }
            else
            {
                <label>AddressLine 2 (optional)</label>
                <InputText @bind-Value="addressInfoModel.AddressLine_2" />
            }
        </div>
        <div id="postalCode" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="addressInfoModel.PostalCode" disabled />
            }
            else
            {
                <label>Postal Code</label>
                <InputText @bind-Value="addressInfoModel.PostalCode" />
                <ValidationMessage For="() => addressInfoModel.PostalCode" />
            }
        </div>
        <div id="city" class="accountFormBox">
            @if (isExternalAccount)
            {
                <InputText @bind-Value="addressInfoModel.City" disabled />
            }
            else
            {
                <label>City</label>
                <InputText @bind-Value="addressInfoModel.City" />
                <ValidationMessage For="() => addressInfoModel.City" />
            }
        </div>
        <div class="form-btn">
            <button class="btn-gray" type="reset">Cancel</button>
            <button class="btn-theme" type="submit">Save changes</button>
        </div>
    </EditForm>
</div>

@code {
    private bool isExternalAccount;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public AddressInfoFormModel addressInfoModel { get; set; } = new AddressInfoFormModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            var logins = await UserManager.GetLoginsAsync(user);
            isExternalAccount = logins.Any();

            var userAddress = await DbContext.AspNetUserAddresses.FirstOrDefaultAsync(x => x.Id == user.ApplicationUserAddressId);

            if (userAddress != null)
            {
                addressInfoModel = new AddressInfoFormModel
                    {
                        AddressLine_1 = userAddress.AddressLine_1,
                        AddressLine_2 = userAddress.AddressLine_2,
                        PostalCode = userAddress.PostalCode,
                        City = userAddress.City
                    };
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {

            var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            var userAddress = await DbContext.AspNetUserAddresses.FirstOrDefaultAsync(x => x.Id == user.ApplicationUserAddressId);

            if (userAddress != null)
            {
                userAddress.AddressLine_1 = addressInfoModel.AddressLine_1!;
                userAddress.AddressLine_2 = addressInfoModel.AddressLine_2;
                userAddress.PostalCode = addressInfoModel.PostalCode!;
                userAddress.City = addressInfoModel.City!;
            }
            else
            {
                userAddress = new ApplicationUserAddress
                    {
                        AddressLine_1 = addressInfoModel.AddressLine_1!,
                        AddressLine_2 = addressInfoModel.AddressLine_2,
                        PostalCode = addressInfoModel.PostalCode!,
                        City = addressInfoModel.City!
                    };
                DbContext.AspNetUserAddresses.Add(userAddress);
                user.ApplicationUserAddressId = userAddress.Id;
            }

            await DbContext.SaveChangesAsync();
            await SignInManager.RefreshSignInAsync(user);
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
            

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }

    public class AddressInfoFormModel
    {
        [Required]
        public string? AddressLine_1 { get; set; }

        public string? AddressLine_2 { get; set; }

        [Required]
        public string? PostalCode { get; set; }

        [Required]
        public string? City { get; set; }
    }
}
